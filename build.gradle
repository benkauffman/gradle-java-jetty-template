apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'cobertura'
apply plugin: 'checkstyle'



group = 'com.krashidbuilt.template'
version = '0.0.0'
description = "KrashidBuilt - Gradle Java API"

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        //https://github.com/stevesaliman/gradle-cobertura-plugin
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.2'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    //database stuff
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.21'
    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.4.7'


    // https://mvnrepository.com/artifact/net.sf.ehcache/ehcache
    compile group: 'net.sf.ehcache', name: 'ehcache', version: '2.10.2.2.21'
    // https://mvnrepository.com/artifact/net.sf.ehcache/ehcache-core
    compile group: 'net.sf.ehcache', name: 'ehcache-core', version: '2.6.11'


    // https://mvnrepository.com/artifact/io.swagger/swagger-jersey-jaxrs
    compile group: 'io.swagger', name: 'swagger-jersey-jaxrs', version: '1.5.10'

    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    compile group: 'commons-validator', name: 'commons-validator', version: '1.5.1'

    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.6.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile group: 'com.netflix.archaius', name: 'archaius-core', version: '0.6.6'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile group: 'com.sun.jersey', name: 'jersey-json', version: '1.19'
    compile group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.19.2'
    compile group: 'com.sun.jersey.contribs', name: 'jersey-multipart', version: '1.19.3'

    compile group: 'com.thetransactioncompany', name: 'cors-filter', version: '2.5'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.4'


    testCompile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.5'
    testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.sun.jersey:jersey-client:1.19.1'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.mockrunner:mockrunner:0.3.1'

}

task beforeBuild()  {
    println("BEFORE BUILD TASK!");
}
compileJava.dependsOn beforeBuild

test {
    System.setProperty('test.integration', 'false')
    exclude '**/*IntegrationTest*'
}


task jettyDaemon() {
    onlyIf {
        'localhost'.equalsIgnoreCase(System.getProperty('integration.server', 'localhost'))
    }
    description = 'Starts Jetty in daemon mode'
    group = 'web application'
    doLast {
        project.jettyRun.daemon = true
    }

    finalizedBy jettyRun
}

jettyRun {

    System.setProperty('log4j.configurationFile', 'log4j2-local.xml')
    System.setProperty('archaius.deployment.applicationId', 'krashidbuilt.api')
    System.setProperty('archaius.deployment.region', 'us-west-2')
    System.setProperty('archaius.deployment.version', version)
    System.setProperty('test.integration', 'false')
    if ( project.hasProperty("environment") ) {

        println("ENVIRONMENT PROPERTY EXISTS")
        String env = project.getProperties().get("environment").toLowerCase();
        println("ENVIRONMENT PROPERTY = " + env)
        System.setProperty('archaius.deployment.environment', env)

    }else{
        println("ENVIRONMENT PROPERTY DOES NOT EXIST: DEFAULTING TO DEV")
        System.setProperty('archaius.deployment.environment', 'dev')
    }


    contextPath = '/'
    httpPort = Integer.valueOf(8080)
    stopPort = Integer.valueOf(8091)
    stopKey = rootProject.name
}

jettyStop {
    stopPort = Integer.valueOf(8091)
    stopKey = rootProject.name
}


task integrationTest(type: Test) {

    include '**/*IntegrationTest*'

    doFirst {
        System.setProperty('test.integration', 'true')
        jettyRun.contextPath = '/';
        jettyRun.httpPort = 8080    // Port for test
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        System.setProperty('test.integration', 'false')
        jettyStop.stopPort = 8091   // Port for stop signal
        jettyStop.stopKey = 'stopKey'
        jettyStop.execute()
    }
}


checkstyle {
    showViolations = true
    ignoreFailures = true
        configFile = rootProject.file('codequality/checkstyle.xml')
    sourceSets = [ project.sourceSets.main ]
}

findbugs {
    ignoreFailures = false
    sourceSets = [ project.sourceSets.main ]
}

pmd {
    ignoreFailures = false
    sourceSets = [ project.sourceSets.main ]
}

tasks.withType(FindBugs) {
    reports {
        xml.withMessages = true
    }
}

cobertura {
    // https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md
    coverageReportDir = new File("$buildDir/reports/cobertura")
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = false //getters and setters
    coverageExcludes = [
            '.*com.krashidbuilt.api.server.*',
            '.*com.krashidbuilt.api.resource.*'
    ]

    //line coverage
    coverageCheckLineRate = 80
    coverageCheckPackageLineRate = 80
    coverageCheckTotalLineRate = 70

    //branch coverage
    coverageCheckBranchRate = 80
//    coverageCheckPackageBranchRate = 80
    coverageCheckTotalBranchRate = 80

}
test.finalizedBy(project.tasks.coberturaCheck)

task checkstyleHtml {
    group = "Verification"
    description = "Creates a human readable Checkstyle report"
    doLast {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('codequality/checkstyle-noframes-sorted.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
}
checkstyleMain.finalizedBy checkstyleHtml

task findbugsHtml {
    group = "Verification"
    description = "Creates a human readable Findbugs report"
    doLast {
        ant.xslt(in: file("$buildDir/reports/findbugs/main.xml"),
                style: file('codequality/findbugs_default.xsl'),
                out: new File("$buildDir/reports/findbugs/main.html"))
    }
}
findbugsMain.finalizedBy findbugsHtml